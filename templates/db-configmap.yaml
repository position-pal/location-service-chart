apiVersion: v1
kind: ConfigMap
metadata:
  name: script-db-configmap
data:
  init.cql: |
    CREATE KEYSPACE IF NOT EXISTS locationservice WITH replication = {
      'class': 'NetworkTopologyStrategy',
      'datacenter1' : {{ .Values.cassandra.replicaCount }}
    };

    USE locationservice;

    CREATE TABLE IF NOT EXISTS messages (
      persistence_id text,
      partition_nr bigint,
      sequence_nr bigint,
      timestamp timeuuid,
      timebucket text,
      writer_uuid text,
      ser_id int,
      ser_manifest text,
      event_manifest text,
      event blob,
      meta_ser_id int,
      meta_ser_manifest text,
      meta blob,
      tags set<text>,
      PRIMARY KEY ((persistence_id, partition_nr), sequence_nr, timestamp)
    ) WITH gc_grace_seconds = 864000 AND compaction = {
      'class' : 'SizeTieredCompactionStrategy',
      'enabled' : true,
      'tombstone_compaction_interval' : 86400,
      'tombstone_threshold' : 0.2,
      'unchecked_tombstone_compaction' : false,
      'bucket_high' : 1.5,
      'bucket_low' : 0.5,
      'max_threshold' : 32,
      'min_threshold' : 4,
      'min_sstable_size' : 50
    };

    CREATE TABLE IF NOT EXISTS tag_views (
      tag_name text,
      persistence_id text,
      sequence_nr bigint,
      timebucket bigint,
      timestamp timeuuid,
      tag_pid_sequence_nr bigint,
      writer_uuid text,
      ser_id int,
      ser_manifest text,
      event_manifest text,
      event blob,
      meta_ser_id int,
      meta_ser_manifest text,
      meta blob,
      PRIMARY KEY ((tag_name, timebucket), timestamp, persistence_id, tag_pid_sequence_nr)
    ) WITH gc_grace_seconds = 864000 AND compaction = {
      'class' : 'SizeTieredCompactionStrategy',
      'enabled' : true,
      'tombstone_compaction_interval' : 86400,
      'tombstone_threshold' : 0.2,
      'unchecked_tombstone_compaction' : false,
      'bucket_high' : 1.5,
      'bucket_low' : 0.5,
      'max_threshold' : 32,
      'min_threshold' : 4,
      'min_sstable_size' : 50
    };

    CREATE TABLE IF NOT EXISTS tag_write_progress(
      persistence_id text,
      tag text,
      sequence_nr bigint,
      tag_pid_sequence_nr bigint,
      offset timeuuid,
      PRIMARY KEY (persistence_id, tag)
    );

    CREATE TABLE IF NOT EXISTS tag_scanning(
      persistence_id text,
      sequence_nr bigint,
      PRIMARY KEY (persistence_id)
    );

    CREATE TABLE IF NOT EXISTS metadata(
      persistence_id text PRIMARY KEY,
      deleted_to bigint,
      properties map<text,text>
    );

    CREATE TABLE IF NOT EXISTS all_persistence_ids(persistence_id text PRIMARY KEY);
    
    CREATE TABLE IF NOT EXISTS snapshots (
      persistence_id text,
      sequence_nr bigint,
      timestamp bigint,
      ser_id int,
      ser_manifest text,
      snapshot_data blob,
      snapshot blob,
      meta_ser_id int,
      meta_ser_manifest text,
      meta blob,
      PRIMARY KEY (persistence_id, sequence_nr)
    ) WITH CLUSTERING ORDER BY (sequence_nr DESC);

    CREATE TABLE IF NOT EXISTS offset_store (
      projection_name text,
      partition int,
      projection_key text,
      offset text,
      manifest text,
      last_updated timestamp,
      PRIMARY KEY ((projection_name, partition), projection_key)
    );

    CREATE TABLE IF NOT EXISTS projection_management (
      projection_name text,
      partition int,
      projection_key text,
      paused boolean,
      last_updated timestamp,
      PRIMARY KEY ((projection_name, partition), projection_key)
    );

    CREATE TABLE IF NOT EXISTS ScopedUserInfo (
      GroupId TEXT,
      UserId TEXT,
      Status TEXT,
      Latitude DOUBLE,
      Longitude DOUBLE,
      LastUpdated TIMESTAMP,
      PRIMARY KEY (GroupId, UserId)
    );

    CREATE TABLE IF NOT EXISTS ScopedUserRoutes (
      GroupId TEXT,
      UserId TEXT,
      Timestamp TIMESTAMP,
      Latitude DOUBLE,
      Longitude DOUBLE,
      PRIMARY KEY (GroupId, UserId, Timestamp)
    ) WITH CLUSTERING ORDER BY (UserId ASC, Timestamp DESC);

    CREATE TABLE IF NOT EXISTS UserGroupsByUserId (
      UserId TEXT,
      GroupId TEXT,
      PRIMARY KEY (UserId, GroupId)
    );

    CREATE TABLE IF NOT EXISTS UserGroupsByGroupId (
      GroupId TEXT,
      UserId TEXT,
      PRIMARY KEY (GroupId, UserId)
    );
